{"version":3,"sources":["pages/App/App.js","components/Heading/Heading.js","routes.js","pages/Landing/Landing.js","pages/About/About.js","router.js","registerServiceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Helmet","charSet","this","props","children","Component","Heading","Link","to","routes","path","component","exact","href","RouteWithSubRoutes","route","Route","render","Object","assign","RouteConfig","HashRouter","pages_App_App","components_Heading_Heading","Switch","map","i","router_RouteWithSubRoutes","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","registerRouter","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cf1c17c9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>AppTaco</title>\n        </Helmet>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Heading extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          AppTaco\n        </Link>>\n        <Link className=\"nav-link\" to=\"/\">\n          Home\n        </Link>\n        <Link className=\"nav-link\" to=\"/\">\n          Share\n        </Link>\n        <Link className=\"nav-link\" to=\"/\">\n          Help\n        </Link>\n      </nav>\n    )\n  }\n}\n\nexport default Heading\n","import Landing from './pages/Landing/Landing'\nimport About from './pages/About/About'\n\nexport default [\n  // landing\n  { path: '/', component: Landing, exact: true },\n  // about\n  { path: '/about', component: About, exact: true },\n]\n","import React, { Component } from 'react'\n// import { Link } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nclass Landing extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <title>AppTaco</title>\n        </Helmet>\n        <div className=\"jumbotron\">\n          <h1 className=\"display-3\">AppDynamics Configs, in Seconds</h1>\n          <p className=\"lead\">\n            It's so cool!!!!\n          </p>\n          <hr className=\"my-4\" />\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Landing\n","import React, { Component } from 'react'\nimport { Helmet } from 'react-helmet'\n\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <title>About AppTaco</title>\n        </Helmet>\n        <h1>About</h1>\n        <div>\n          <p>\n          AppDynamics Configs, in Seconds\n          </p>\n          <p>\n            Learn more about it at the{' '}\n            <a href=\"https://github.com/sys13/apptaco\">\n              GitHub repository\n            </a>.\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './pages/App/App'\nimport Heading from './components/Heading/Heading'\nimport routes from './routes'\n\n// wrap <Route> and use this everywhere instead, then when\n// sub routes are added to any route it'll work\nconst RouteWithSubRoutes = route => (\n  <Route\n    path={route.path}\n    exact={route.exact}\n    render={props => (\n      // pass the sub-routes down  to keep nesting\n      <route.component {...props} routes={route.routes} />\n    )}\n  />\n)\n\nconst RouteConfig = () => (\n  <Router>\n    <App>\n      <Heading />\n      <Switch>\n        {routes.map((route, i) => <RouteWithSubRoutes key={i} {...route} />)}\n      </Switch>\n    </App>\n  </Router>\n)\n\nexport default RouteConfig\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import ReactDOM from 'react-dom'\nimport './index.css'\nimport 'bootstrap'\nimport registerRouter from './router'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(registerRouter(), document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}